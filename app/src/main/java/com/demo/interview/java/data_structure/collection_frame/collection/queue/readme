队列相关

阻塞队列
https://www.cnblogs.com/jackion5/p/11173721.html
https://fangjian0423.github.io/2016/05/10/java-arrayblockingqueue-linkedblockingqueue-analysis/
https://www.jianshu.com/p/8503349b27f4

什么是阻塞队列？
阻塞队列（ BlockingQueue） 是一个支持两个附加操作的队列。 这两个附加的操作是： 在队
列为空时， 获取元素的线程会等待队列变为非空。 当队列满时， 存储元素的线程会等待队列
可用。 阻塞队列常用于生产者和消费者的场景， 生产者是往队列里添加元素的线程， 消费者
是从队列里拿元素的线程。 阻塞队列就是生产者存放元素的容器， 而消费者也只从容器里拿
元素
 ArrayBlockingQueue ： 一个由数组结构组成的有界阻塞队列。
 LinkedBlockingQueue ： 一个由链表结构组成的有界阻塞队列。
 PriorityBlockingQueue ： 一个支持优先级排序的无界阻塞队列。
 DelayQueue： 一个使用优先级队列实现的无界阻塞队列。
 SynchronousQueue： 一个不存储元素的阻塞队列。
 LinkedTransferQueue： 一个由链表结构组成的无界阻塞队列。
 LinkedBlockingDeque： 一个由链表结构组成的双向阻塞队列

1. BlockingQueue中是不允许添加null的， 该接受在声明的时候就要求所有的
实现类在接收到一个null的时候， 都应该抛出NullPointerException。
2. BlockingQueue是线程安全的， 因此它的所有和队列相关的方法都具有原
子性。 但是对于那么从Collection接口中继承而来的批量操作方法， 比如
addAll(Collection e)等方法， BlockingQueue的实现通常没有保证其具有原
子性， 因此我们在使用的BlockingQueue， 应该尽可能地不去使用这些方
法。
3. BlockingQueue主要应用于生产者与消费者的模型中， 其元素的添加和获
取都是极具规律性的。 但是对于remove(Object o)这样的方法， 虽然
BlockingQueue可以保证元素正确的删除， 但是这样的操作会非常响应性
能， 因此我们在没有特殊的情况下， 也应该避免使用这类方法。


          Throws exception    Returns special value     Blocks       Times out
Insert      add(e)                 offer(e)             put(e)      offer(e, time,unit)
Remove      remove()                poll()              take()      poll(time,unit)
Examine     element()               peek()              无           无


插入操作
add(e)//队列未满时，返回true；队列满则抛出IllegalStateException(“Queue full”)异常——AbstractQueue
offer(e)//队列未满时，返回true；队列满时返回false。非阻塞立即返回。
offer(e, time, unit)//设定等待的时间，如果在指定时间内还不能往队列中插入数据则返回false，插入成功返回true。
put(e)//队列未满时，直接插入没有返回值；队列满时会阻塞等待，一直等到队列未满时再插入。

删除操作
remove()//队列不为空时，返回队首值并移除；队列为空时抛出NoSuchElementException()异常——AbstractQueue
poll()//队列不为空时返回队首值并移除；队列为空时返回null。非阻塞立即返回。
poll(time, unit)//设定等待的时间，如果在指定时间内队列还未孔则返回null，不为空则返回队首值
take(e)//队列不为空返回队首值并移除；当队列为空时会阻塞等待，一直等到队列不为空时再返回队首值。








